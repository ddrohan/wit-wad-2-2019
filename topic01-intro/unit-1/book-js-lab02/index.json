


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "JS.Lab-02",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>In these labs we&#39;re going to build a very simple Console Version of our Node Web App (while we learn about Web Apps) using <strong>WebStorm</strong>.</p>",
  "folder" : "book-js-lab02",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# JavaScript Lab 2 - Functions & Callbacks",
    "shortTitle": "JS.Lab-02",
    "contentMd" : "# JavaScript Lab 2 - Functions & Callbacks\n\nIn these labs we're going to build a very simple Console Version of our Node Web App (while we learn about Web Apps) using **WebStorm**.\n\nIf you haven't done so already, download Atom [here](https://atom.io) . This app won't have any web functionality at all but it will take you through a brief look at using javascript and callbacks in a Node Console App.\n\nOnce completed and running via WebStorm, your App Menu will look something like this\n\n![](img/jslab201complete.png)\n"
    },
  
    {
    "title": "# Objectives",
    "shortTitle": "01",
    "contentMd" : "# Objectives\n\nIn this Lab, you will continue to build a simple Node Console App (using WebStorm), called **DonationWeb.0.1**.  We will use the WebStorm IDE just to get used to using the environment.\n\nOn completion of this lab you'll be able to\n\n* create a basic Node Console App with limited CRUD functionality\n* work with some Node 'packages' and use them in your app\n* implement some simple JavaScript Callback functions\n"
    },
  
    {
    "title": "# Step 2 - Adding & Finding a Donation",
    "shortTitle": "02",
    "contentMd" : "# Step 2 - Adding & Finding a Donation\n\nWe're going to continue with our **DonationWeb.0.1** console app and in this step we'll look at adding a Donation to our existing list and allow our updated list to be searched for a particular donation. Remember though, this will only exist for the duration of the app running (but we'll introduce persistence later on in the module).\n\nFirst thing to do is open up your existing project (if you haven't done so already) and run it again, to ensure everything is working ok.\n\nNext, add the following 'helper function' to your **index.js** to allow us to search for (or filter out) a single donation from our array of donations\n\n~~~JS\nfunction getByValue(array, id) {\n          var result  = array.filter(function(obj){return obj.id == id;} );\n          return result ? result[0] : null; // or undefined\n        }\n~~~\n\nIt takes the array to search, and the 'id' of the donation to search for - you will use this later on.\n\nNow, add the following function stub to eventually allow the user to add a donation to the existing list of donations\n\n~~~JS\nfunction addDonation() {\n    //Add a new donation to our list\n\n    //Randomly generate an id\n    let id = Math.floor((Math.random() * 10000000) + 1);\n\n    let currentSize = donations.length;\n    let donation = {};\n\n    // Create a new donation Object here,\n    // Set it's id to the randomly generated id above,\n    // Prompt the user for Payment Type & Amount,\n    // Set the upvotes to a default value, and then\n    // add the donation object to the array of donations.\n\n    // You should also inform the user whether the 'add'\n    // has been successful or not?\n}\n~~~\n\nHere's an idea of what you should be getting once you've implemented this step correctly\n\n![](img/jslab201.png)\n\nNow, once we've added a Donation, it would be useful to be able to search our list so, using the *getByValue()* function above complete the following function\n\n~~~JS\nfunction findDonation() {\n      // Prompt the user for the id to search for and\n      // display to the user if found\n      // Display a suitable message if not found\n      }\n~~~\n\nso the user sees something like this\n\n![](img/jslab202.png)\n"
    },
  
    {
    "title": "",
    "shortTitle": "03",
    "contentMd" : "\n# Step 3 - Deleting a Donation\n\nTo delete a donation we'll make use of another 'helper' method - remove()\n\n~~~JS\nfunction remove(array, element) {\n      const index = array.indexOf(element);\n\n        if (index !== -1) {\n            array.splice(index, 1);\n          }\n      }\n~~~\n\nSo using the method above, complete the following function\n\n~~~JS\nfunction deleteDonation() {\n\n        // Prompt the user for the id to delete\n        // Find that donation and 'remove' it from the list\n        // using the remove method supplied.\n\n        // Make sure to display the list before and after a\n        // successful delete or a suitable message otherwise\n            }\n\n\n~~~\nso that we have something like this - note we display the list of donations before AND after the deletion.\n\n![](img/jslab203.png)\n"
    },
  
    {
    "title": "",
    "shortTitle": "04",
    "contentMd" : "\n# Step 4 - Solution Source Code\n\n~~~JS\nconst chalk         = require('chalk');\nconst readlineSync  = require('readline-sync');\n\nlet donations = [\n   {id: 1000000, paymenttype: 'PayPal', amount: 1600, upvotes: 1},\n   {id: 1000001, paymenttype: 'Direct', amount: 1100, upvotes: 4},\n   {id: 1000002, paymenttype: 'Visa', amount: 100, upvotes: 2}\n];\n\nfunction getByValue(array, id) {\n   var result  = array.filter(function(obj){return obj.id == id;} );\n   return result ? result[0] : null; // or undefined\n}\n\nfunction remove(array, element) {\n   const index = array.indexOf(element);\n\n   if (index !== -1) {\n       array.splice(index, 1);\n   }\n}\n\nfunction addDonation() {\n   //Add a new donation to our list\n\n   let id = Math.floor((Math.random() * 10000000) + 1); //Randomly generate an id\n   let currentSize = donations.length;\n   let donation = {};\n\n   donation.id = id;\n   donation.upvotes = 1;\n\n   donation.paymenttype = readlineSync.question('Enter Payment Type =>> ');\n   donation.amount = readlineSync.question('Enter Amount =>> ');\n\n   donations.push(donation);\n\n   if((currentSize + 1) == donations.length)\n       console.log('Donation Added!');\n   else\n       console.log('Donation NOT Added!');\n}\n\nfunction continueYN() {\n   if (readlineSync.keyInYN('Do you want to Continue?'))\n   // 'Y' key was pressed.\n       displayMenu();\n   else\n   // Another key was pressed.\n       process.exit(0);\n}\n\nfunction findDonation() {\n\n   let id = readlineSync.question('Enter Donation ID =>> ');\n\n   let donation = getByValue(donations,id);\n\n   if(donation != null)\n       console.log(donation);\n   else\n       console.log('Donation NOT Found!');\n}\n\nfunction deleteDonation() {\n\n   console.log(donations);\n   let id = readlineSync.question('Enter Donation ID to Remove =>> ');\n\n   let donation = getByValue(donations,id);\n\n   if(donation != null) {\n       remove(donations,donation);\n       console.log(donations);\n   }\n   else\n       console.log('Donation NOT DELETED!');\n}\n\nfunction displayMenu() {\n\n   let choice;\n\n   let options = ['Make A Donation', 'Display All Donations', 'Find A Donation', 'Delete A Donation'];\n\n   console.log('\\x1Bc'); // Clear the Screen\n   console.log(chalk.bold('----- DONATION -----'));\n   console.log('');\n   choice = readlineSync.keyInSelect(options, chalk.green.bold('Choose an Option?'));\n\n   if(choice+1 == 1)\n       addDonation();\n   else if(choice+1 == 2)\n       console.log(donations);\n   else if(choice+1 == 3)\n       findDonation();\n   else if(choice+1 == 4)\n       deleteDonation();\n   else\n       return process.exit(0);\n\n   continueYN();\n}\n\ndisplayMenu();\n~~~\n"
    }
  
  ]
  }

