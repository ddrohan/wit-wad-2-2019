


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-03",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>In this lab we will be introducing some proper persistence, through a <strong>MongoDB</strong> backend, initially running locally, and then eventually deploying to <a href='http://www.mlab.com'>www.mlab.com</a> or if you need a new Atlas account <a href='http://www.mongodb.com'>www.mongodb.com</a> so that we can have remote mongo support.</p>",
  "folder" : "book-web-lab03",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Lab 3 - Donation 3.0 (Mongo, Express & Node App)",
    "shortTitle": "Lab-03",
    "contentMd" : "# Lab 3 - Donation 3.0 (Mongo, Express & Node App)\n\nIn this lab we will be introducing some proper persistence, through a **MongoDB** backend, initially running locally, and then eventually deploying to [www.mlab.com](http://www.mlab.com) or if you need a new Atlas account [www.mongodb.com](http://www.mongodb.com) so that we can have remote mongo support.\n\nHere's a link to some of the commands you'll be using throughout the lab [QuickLinks] (http://docs.mongodb.org/master/tutorial/getting-started-with-the-mongo-shell/) but most of what we do in this lab we'll have covered in the lectures.\n"
    },
  
    {
    "title": "# Objectives",
    "shortTitle": "01",
    "contentMd" : "# Objectives\n\nIn this Lab, you will be required to build the next version of our Donation Case Study Web App, called **DonationWeb 3.0**.  We will build on the previous lab, so you can either use your own version of **DonationWeb 2.0** or download the starter code **[here](archives/donationweb-2.0.zip)** (just make sure you rename the project folder). In this version we will be implementing a ***MongoDB*** backend (and reusing our previous solution).  \n\nOn completion of this lab you'll be able to\n\n* create a **NodeJS** web app using **express**\n* run this app as a **NodeJS Server** and process client requests\n* be able to use **npm** to install dependency modules\n\nAND\n\n* store data in a **MongoDB** database\n"
    },
  
    {
    "title": "# Step 2 - Setup",
    "shortTitle": "02",
    "contentMd" : "# Step 2 - Setup\n\nFirst thing you should do is download the starter code (or the solution to the previous lab) **[here](archives/donationweb-2.0.zip)** and then extract it to your single parent folder for all your web app projects you created for previous labs.\n\nRename the extracted folder, (or copy your own version) to **donationweb-3.0**\n\nOpen your **donationweb-3.0** web app (in WebStorm) and then change your 'title' like so\n\n![](img/lab03s01.png)\n\nand launch it.\n\nYou may not get any errors, but you should probably reconfigure your project (as it's a copy) and confirm the **node modules** path as follows:\n\nOpen your preferences and navigate to the **Library** settings and update your **node_modules** path to point to the current project if necessary.\n\n![](img/lab03s02.png)\n\nLaunch again, if everything goes to plan you should be able to visit [http://localhost:3000](http://localhost:3000) and you should see something like the following:\n\n\n![](img/lab03s03.png)\n\n\nThe next thing to do is to add the **mongodb** and **mongoose** module dependencies to our project, which WebStorm can help us with (as we did in Lab 01)\n\n\n![](img/lab03s04.png)\n\n\nIf you want to go old school, you can manually install like so\n\n~~~\nnpm install mongoose\n~~~\n\nand\n\n~~~\nnpm install mongodb\n~~~\n\nConfirm your **node_modules** now includes the following:\n\n![](img/lab03s05.png)\n\nThe last step in our 'Setup' is to kick off our localhost mongodb server and insert a few 'Donations' so we can test our refactored 'findAll' function (next step).\n\nOpen up a terminal window and launch the mongodb server\n\n![](img/lab03s06.png)\n\n![](img/lab03s07.png)\n\nOpen another, separate terminal window and launch the client\n\n![](img/lab03s08.png)\n\n![](img/lab03s09.png)\n\n![](img/lab03s10.png)\n\nIn the client window,\n\n- create/switch to the **'donationsdb'** database\n- insert a few records (similar to the screenshots) and make sure you name your collection **donations** and **NOT** **donationsdb** as in the Screenshots, so the command you should be inserting with is (for example)\n\n~~~\ndb.donations.insert(\"paymenttype\" : \"PayPal\", \"amount\" : 1500, \"upvotes\" : 0 })\n~~~\n\n**So what we have here is a database called donationsdb and a collection within it called donations **\n\n![](img/lab03s11.png)\n\nTo confirm the records were inserted correctly execute a **find()**\n~~~\ndb.donations.find()\n~~~\n\n![](img/lab03s12.png)\n\n![](img/lab03s13.png)\n\nWe now have a few records or 'documents' we can access via our Node Web Server (next step).\n\nIf you have no 'option' to run your app, you may have to reconfigure the 'Run/Debug' settings so select 'Edit Configurations' and you'll get this screen\n\n![](img/lab03s14.png)\n\nthen (as instructed) click the + button to add a new configuration - select 'Node' and your are presented with this screen\n\n![](img/lab03s15.png)\n\nPopulate your settings similar to what's below\n\n![](img/lab03s17.png)\n\n![](img/lab03s16.png)\n\nAnd run your app to get\n\n![](img/lab03s18.png)\n"
    },
  
    {
    "title": "#Step 3 - Creating our Database Schema",
    "shortTitle": "03",
    "contentMd" : "#Step 3 - Creating our Database Schema\n\nOur first step in making a persistent data store is to configure our data models. To do this, we are going to be adding a schema layer on top of **MongoDB** using a nice library called ***Mongoose***. Before we begin, let's make sure our **MongoDB** server is running.\n\nIf Mongo isn't running on your machine, enter this into your terminal:\n\n~~~\nmongod\n~~~\nand to run a mongo client\n\n```\nmongo\n```\n\nWe connect to our local MongoDB instance by adding the following code into our donations.js **routes** file:\n\n```javascript\nlet mongoose = require('mongoose');\n\n...\n\nmongoose.connect('mongodb://localhost:27017/donationsdb');\n\nlet db = mongoose.connection;\n\ndb.on('error', function (err) {\n    console.log('Unable to Connect to [ ' + db.name + ' ]', err);\n});\n\ndb.once('open', function () {\n    console.log('Successfully Connected to [ ' + db.name + ' ]');\n});\n```\n\n(It's probably a good idea to remove our javascript list altogether at this point as we don't need it.)\n\nThis will open a connection with the ***donationsdb*** database running on our Mongo server. Now we can modify our existing model and introduce a database schema.\n\n---\n## Creating a Schema with Mongoose\n\nIn our **models/** directory edit **donations.js** and replace the current 'model' with the following code:\n\n```javascript\nlet mongoose = require('mongoose');\n\nlet DonationSchema = new mongoose.Schema({\n    paymenttype: String,\n    amount: Number,\n    upvotes: {type: Number, default: 0}\n    },\n    { collection: 'donations' });\n\nmodule.exports = mongoose.model('Donation', DonationSchema);\n```\nHere we've defined a model called ***Donation*** with several attributes corresponding to the type of data we'd like to store. We've declared our upvotes field to be initialized to 0. We also explicitly name the collection within which we are storing our donations.\n\nNext we register that model with the global mongoose object we imported using require() so that it can be used to interact with the database anywhere else mongoose is imported.\n\n**It is strongly recommended to run your web server at this point, to ensure everything is configured correctly and before we go ahead an modify our routes to interact with the database.**\n\nSo as before, go ahead and fire up the server - but make sure your mongodb is running first, and you get the **'Successfully connected ... '** message at the console.\n\n\n![](img/lab03s19.png)\n"
    },
  
    {
    "title": "# Step 4 - Modifying our 'Routes', Part 1 ( 'findAll' & 'findOne' )",
    "shortTitle": "04",
    "contentMd" : "# Step 4 - Modifying our 'Routes', Part 1 ( 'findAll' & 'findOne' )\n\nOur current setup involves pulling data from a javascript object array and storing objects back to that array. We now want to be able to store and retrieve our ***'donations'*** from our mongodb database.\n\nThe first thing we'll do is modify our 'findAll' route.\n\n---\n## Modifying Our First Route - 'findAll'\n\nEdit your **routes/donations.js** file and navigate to your existing 'findAll' function.\n\nNow, replace it with the following :\n\n```javascript\nrouter.findAll = (req, res) => {\n    // Return a JSON representation of our list\n    res.setHeader('Content-Type', 'application/json');\n\n    Donation.find(function(err, donations) {\n        if (err)\n            res.send(err);\n\n        res.send(JSON.stringify(donations,null,5));\n    });\n}\n```\n\nNotice how we use the Mongoose 'find()' function to retrieve all the objects from the 'Model'.\n\nMake sure you have the proper **requires** statement in your routes file\n\n~~~javascript\nvar Donation = require('../models/donations');\n~~~\n\nto include the mongoose schema.\n\n---\n### Testing Our 'findAll' Route\n\n### The Request\n\nGETing all the donations in our mongodb database\n~~~js\n/donations\n~~~\n\n![](img/lab03s20.png)\n\n### The Response\n\n![](img/lab03s21.png)\n\n---\n## Modifying Our Second Route - 'findOne'\n\nOur first route returned all the donations to a client, but what if the client only want's to get at a single donation from the database - that's what our next route 'findOne' does, so we need to refactor our current implementation to make use of mongoose.\n\n```javascript\nrouter.findOne = (req, res) => {\n\n    res.setHeader('Content-Type', 'application/json');\n\n    Donation.find({ \"_id\" : req.params.id },function(err, donation) {\n        if (err)\n            // return a suitable error message\n        else\n            // return the donation\n    });\n}\n```\n\nNotice the use of the **req** parameter to pass in the ***id*** of the donation we require.\n\n---\n### Testing Our 'findOne' Route\n\n### The Request\n\nGETing donation with id '5b1d26cc572f1998d830a691'\n~~~html\n/donations/5b1d26cc572f1998d830a691\n~~~\n\n![](img/lab03s22.png)\n\n### The Response\n\n![](img/lab03s23.png)\n\nrequesting donation with id '5b1d26cc572f1998d830a**XYZ**' (doesn't exist)\n\n~~~html\n/donations/5b1d26cc572f1998d830aXYZ\n~~~\n\n![](img/lab03s24.png)\n\n---\n"
    },
  
    {
    "title": "# Step 5 - Modifying our 'Routes', Part 2 ( 'addDonation' & 'incrementVotes' )",
    "shortTitle": "05",
    "contentMd" : "# Step 5 - Modifying our 'Routes', Part 2 ( 'addDonation' & 'incrementVotes' )\n\n## Modifying Our Third Route - 'Add a Donation'\n\nAgain, edit your **routes/donations.js** file and navigate to your existing 'addDonation' function.\n\nAnd replace it with the following :\n\n```javascript\nrouter.addDonation = (req, res) => {\n\n    res.setHeader('Content-Type', 'application/json');\n\n    var donation = new Donation();\n\n    donation.paymenttype = // the requested value\n    donation.amount = // the requested value\n\n    donation.save(function(err) {\n        if (err)\n            // return a suitable error message\n        else\n            // return a suitable success message\n    });\n}\n```\nThere's a bit more going on here, so make sure you understand the general jist of how this works. (But I'll explain in the labs anyway)\n\nYou may need to restart your server but if everything goes to plan, you should now be able to store and retrieve 'donations' from your mongodb database.\n\n\nLet's test our **addDonation** using WebStorms REST Client (like before)\n\n---\n\n### Testing Our 'Add' Route\n\n### The Request\n\nWe need to fill in the **Request Body** for our POST\n\n![](img/lab03s25.png)\n\n### The Response\n\n![](img/lab03s26.png)\n\nGET all the donations again, just to confirm\n\n## Modifying Our Fourth Route - 'Increment Votes'\n\nAgain, edit your **routes/donations.js** file and navigate to your existing 'incrementVotes' function.\n\nAnd replace it with the following :\n\n```javascript\nrouter.incrementUpvotes = (req, res) => {\n\n    Donation.findById(/*id from request parameters*/, function(err,donation) {\n        if (err)\n            // return a suitable error message\n        else {\n            donation.upvotes += 1;\n            donation.save(function (err) {\n                if (err)\n                    // return a suitable error message\n                else\n                // return a suitable success message\n            });\n        }\n    });\n}\n```\nLike last time, there's a bit more going on here, so make sure you understand the general jist of how this works. (But I'll explain in the labs if necessary?)\n\nYou may need to restart your server but if everything goes to plan, you might now be able to 'upvote' donations from your mongodb database.\n\n---\n\n### Testing Our 'UpVote' Route\n\nPUTing (or updating) donation with id '5b1d26cc572f1998d830a691'\n~~~html\n/donations/5b1d26cc572f1998d830a691/vote\n~~~\n\n### The Request\n\n![](img/lab03s27.png)\n\n### The Response\n\n![](img/lab03s28.png)\n\nGET all donations again to confirm the update\n"
    },
  
    {
    "title": "# Step 6 - Modifying our 'Routes', Part 3 ( 'deleteDonation' & 'findTotalVotes')",
    "shortTitle": "06",
    "contentMd" : "# Step 6 - Modifying our 'Routes', Part 3 ( 'deleteDonation' & 'findTotalVotes')\n\n\n## Modifying Our Final Routes - 'Delete a Donation'\n\nEdit your **routes/donations.js** file and navigate to your existing 'deleteDonation' function.\n\nNow, replace it with the following :\n\n```javascript\nrouter.deleteDonation = (req, res) => {\n\n    Donation.findByIdAndRemove(/*id from request parameters*/, function(err) {\n        if (err)\n            // return a suitable error message\n        else\n            // return a suitable success message\n    });\n}\n```\n\nNotice how we use the Mongoose **'findByIdAndRemove'** function to retrieve and delete the object from the 'Model'.\n\n### Testing Our 'Delete' Route\n\n### The Request\n\n![](img/lab03s29.png)\n\n### The Response\n\n![](img/lab03s30.png)\n\n![](img/lab03s31.png)\n\nGET all donations again to confirm\n\n\n## Modifying Our Final Routes - 'Find Total Votes'\n\nEdit your **routes/donations.js** file and navigate to your existing 'findTotalVotes' function.\n\nNow, replace it with the following :\n\n~~~js\nrouter.findTotalVotes = (req, res) => {\n\n    Donation.find(function(err, donations) {\n        if (err)\n            // return a suitable error message\n        else\n            // return the total number of votes\n    });\n}\n~~~\n\n\n### Testing Our 'findTotalVotes' Route\n\n### The Request\n\nGET all donations first to confirm\n\n![](img/lab03s32.png)\n\n### The Response\n\n![](img/lab03s33.png)\n"
    },
  
    {
    "title": "# Step 7 - Remote Cloud Support",
    "shortTitle": "07",
    "contentMd" : "# Step 7 - Remote Cloud Support\n\nIf you haven't done so already set up your mongodb remote database on either mlabs or mongodb. You can follow a quick guide to my own setup here [mlab setup](https://ddrohan.github.io/wit-wad-2-2019/topic01-intro/unit-1/book-dev-setup/index.html) for both an mlab account and a mongodb atlas account.\n\n\nNow, create a new mongod connection in your **routes/donations** file like so\n\n**NOTE: The Database is named 'donationsdb', the mongoose Schema will allow us to find the relevant Collection**\n\n## mlab connection string\n~~~javascript\nvar mongodbUri ='mongodb://<user>:<password>@ds255260.mlab.com:55260/donationsdb';\n~~~\n\n## mongodb atlas connection string\n~~~javascript\nvar mongodbUri = 'mongodb+srv://<user>:<password>@wit-donation-cluster-upbus.mongodb.net/donationsdb?retryWrites=true&w=majority';\n~~~\n\nand connect using this connection instead of your localhost Connection\n\n~~~javascript\nmongoose.connect(mongodbUri);\n~~~\n\n**NOTE - this is my own connection string, so you will need to grab your own connection from your mlab account and use the username/password you set up to access your database**\n\nYou should run your app to confirm you can connect to your remote mongodb database before proceeding.\n\nOnce you're connecting ok, you should then insert a few records and retrieve them, just to confirm everything is working ok and then verify this against your mlab account\n\n## Testing Our Connection\n\n![](img/lab03s40.png)\n\n![](img/lab03s41.png)\n\n![](img/lab03s42.png)\n\n![](img/16.png)\n"
    },
  
    {
    "title": "# Solution - Lab 3",
    "shortTitle": "Solution",
    "contentMd" : "# Solution - Lab 3\n\nYou can find the mlab solution to this lab **[here](archives/donationweb-3.0.zip)**.\n"
    }
  
  ]
  }

