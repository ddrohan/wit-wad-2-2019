


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-02",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>In this lab we will be using our WebStorm IDE to build a simple Node/Express Server to initially act as a Web Service APi which we will test manually, and eventually it will be our back-end to a full MEAN Stack Web App.</p>",
  "folder" : "book-web-lab02",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "#Lab 2 - DonationWeb 2.0 (Express & Node App Continued)",
    "shortTitle": "Lab-02",
    "contentMd" : "#Lab 2 - DonationWeb 2.0 (Express & Node App Continued)\n\nIn this lab we will be using our WebStorm IDE to build a simple Node/Express Server to initially act as a Web Service APi which we will test manually, and eventually it will be our back-end to a full MEAN Stack Web App.\n"
    },
  
    {
    "title": "# Objectives",
    "shortTitle": "01",
    "contentMd" : "# Objectives\n\nIn this Lab, you will be required to build the first version of our Donation Case Study Web App, called **DonationWeb 2.0**.  We will scaffold the app similar to [Lab 1](https://ddrohan.github.io/wit-wad/topic02-node/book-web-lab01/index.html), so if you're still a bit unsure of this process, maybe have a go at it again?\n\nOn completion of this lab you'll be able to\n\n* create a simple **NodeJS** app using **express**\n* run this app as a **NodeJS Server** and process client requests\n* be able to use **npm** to install dependency modules\n* be able to implement a simple Web APi\n\nIn this version we will be implementing a simple **RESTful APi** with the following routes\n\n  - **GET /donations** - return a list of donations and associated metadata\n  - **GET /donations/:id** - return an individual donation with associated metadata\n  - **POST /donations** - create a new donation\n  - **PUT /donations/:id/upvote** - upvote a donation, notice we use the donation ID in the URI\n  - **DELETE /donations/:id**  - delete a donation by its ID\n"
    },
  
    {
    "title": "# Step 2 - Project Setup",
    "shortTitle": "02",
    "contentMd" : "# Step 2 - Project Setup\n\nWe're going to build our first Node/Express DonationWeb project, so (assuming you already have it installed) launch your WebStorm IDE and create a new Node/Express Project as follows:\n\n(Just for reference, you'll probably see the list of projects previously opened, like below)\n\n![](img/lab02s01.png)\n\nSelect 'Create New Project' and you should get something like this:\n\n![](img/lab02s02.png)\n\nSelect a 'Node.js Express App' and browse to the location you want to store your project files. It's probably a good idea to store all your web apps in a single folder (as we did in Lab 01) so go ahead and name your project **donationweb-2.0** (as above).\n\nMake sue you choose **EJS** again as the templating option (like before)\n\nYour project should now look like this\n\n![](img/lab02s03.png)\n\nOpen up your **index.js**, and like we did in Lab 01, change the 'title' of our Project (as below)  \n\n![](img/lab02s04.png)\n\nand once again, click on the 'play' button to run/launch your Web App..\n\nIf you've followed all the steps correctly you should be able to run your app (or visit [http://localhost:3000](http://localhost:3000)) and see something like the following:\n\n![](img/lab02s06.png)\n\n\nNow, if you'd rather your browser launch automatically you can configure you 'Run' options and choose the Browser you prefer\n\nJust be sure to 'tick' the 'After Launch' check box\n\n![](img/lab02s05.png)\n\nClose the browser tab/window and run your app again, to confirm your new run configuration is correct.\n\nThe next few steps will involve implementing some of our RESTful APi and some WebStorm configuration changes.\n"
    },
  
    {
    "title": "# Step 3 - Creating our 'Model'",
    "shortTitle": "03",
    "contentMd" : "# Step 3 - Creating our 'Model'\n\nBefore we can think about accessing data on our Server via a RESTful APi, we first need the actual data :) , so this step will involve creating a list of 'Donations' that we can 'expose' via our APi.\n\nThe first thing we need to do is create a new directory in our root directory called ***models/***\n\n![](img/lab02s07.png)\n\nand then\n\n![](img/lab02s08.png)\n\nand within that directory create a new file called **donations.js**.\n\n![](img/lab02s09.png)\n\nand\n\n![](img/lab02s10.png)\n\nNow, paste the following code into your newly created **donations.js** file\n\n```javascript\nconst donations = [\n\t\t\t\t {id: 1000000, paymenttype: 'PayPal', amount: 1600, upvotes: 1},\n\t\t\t\t {id: 1000001, paymenttype: 'Direct', amount: 1100, upvotes: 2},\n\t\t\t\t {id: 1000002, paymenttype: 'Visa', amount: 1000, upvotes: 1}\n\t\t\t\t];\n\nmodule.exports = donations;\n```\nNotice the field (id) in our model, this will be useful later on for deleting etc.\n\nYour project should now look something like this\n\n![](img/lab02s11.png)\n"
    },
  
    {
    "title": "",
    "shortTitle": "04",
    "contentMd" : "\n# Step 4 - Adding our 'Routes', Part 1 ( 'findAll' & 'findOne')\n\nWith our \"backend\" model in place, it's now time to open some routes that a client can interact with. The following are a list of actions a user can perform:\n\n* view all donations\n* Find a single donation\n* Add a new donation\n* Upvote a donation\n* Delete a donation\n\n\nThe actions map directly to several routes, which are described as follows:\n\n* GET **/donations** - return a list of donations and associated metadata\n* GET **/donations/:id** - return an individual donation with associated metadata\n* POST **/donations** - create a new donation\n* PUT **/donations/:id/upvote** - upvote a donation, notice we use the donation ID in the URL\n* DELETE **/donations/:id** - delete a donation by ID\n\n\n---\nBefore we proceed, WebStorm has a very nice (and useful!) feature to assist the developer in writing javascript - **Code Assistance**, which happens to be disabled by default, so we need to turn it on, as follows;\n\nFile->Default Settings\n\n![](img/lab02s12.png)\n\nLanguages & Frameworks->Node.js & NPM\n\n![](img/lab02s13.png)\n\n**Enable** Node.js Core Library\n\n![](img/lab02s14.png)\n\nI'd also update the package manager to **NPM** if it'd not already selected.\n\n---\n\n## Creating Our First Route - 'List All Donations'\n\nTo keep things organised we will be defining these routes in a **routes/donations.js** file, so create a new file 'donations.js' in the existing 'routes' folder in your project.\n\nLet's begin by opening up the first route we listed, which should return a **JSON** list containing all donations. We start by creating a function (***findAll***) for retrieving donations in our **routes/donations.js** file.\n\n```javascript\nlet donations = require('../models/donations');\nlet express = require('express');\nlet router = express.Router();\n\nrouter.findAll = (req, res) => {\n  // Return a JSON representation of our list\n    res.json(donations);\n}\n\nmodule.exports = router;\n```\nWe make sure we import **express** and have a handle to our donations model. By right, we should have some error handling in there, but we'll be optimistic!\n\nNext, inside our **app.js** we need to define the actual route which will trigger the above function so add the following around line 26/27 to add the actual ***GET*** APi route.\n\n(there'll be other, similar, routes around that line so just add it after those but BEFORE the error handling).\n\n```javascript\napp.get('/donations', donations.findAll);\n```\n\nNow, try and run your app and see what happens....\n\nYou probably got something like this\n\n![](img/lab02s15.png)\n\nWe're trying to call a function 'findAll' on an object (donations) that the js interpreter can't find.\n\nOrdinarily, we'd have to manually add in the javascript we need, but we can get WebStorm to do this for us - first, just move your mouse over the error to get some extra info\n\n![](img/lab02s16.png)\n\nNow highlight the error and hit Alt+Enter (on a Mac) and you get the following;\n\n![](img/lab02s17.png)\n\nChoose the correct 'fix' and the necessary 'requires' statement is added to our js file - kinda handy don't you think?!\n\n![](img/lab02s18.png)\n\nNow, to actually test our APi we need to launch our Server again and point the browser at [http://localhost:3000/donations](http://localhost:3000/donations) and we should get back a json string of our data, like so.\n\n![](img/lab02s19.png)\n\nNow, to display our JSON in a more readable format we can update our response HEADERS and 'stringify' the json, like so\n\n~~~js\nres.setHeader('Content-Type', 'application/json');\nres.send(JSON.stringify(donations,null,5));\n~~~\n\nand if we run the app again we get\n\n![](img/lab02s20.png)\n\nOver time, this would probably become a bit time consuming, but WebStorm to the rescue again :) there's a feature to **Test RESTful Web Service**, so launch that like so\n\n![](img/lab02s21a.png)\n\nor\n\n![](img/lab02s21b.png)\n\nand you get the **REST Client** window, so select/type in the following for our test request\n\n* HTTP Method **GET**\n* Host/port **http://localhost:3000**\n* Path **/donations**\n\n![](img/lab02s22.png)\n\nOn the 'Request' tab, update the 'Accept' Header **application/json**\n\nIf everything goes according to plan, you'll see the same json list of donations in the **Response**.\n\nYou could continue to use the browser to test the APi, but things will get a bit tricky when we want to test our add & update requests so we'll stick with the REST Client for the moment.\n\n---\n## Creating Our Second Route - 'findOne'\n\nOur first route returned all the donations to a client, but what if the client only wants to get at a single donation - that's what our next route 'findOne' will do.\n\nFirst, add a 'helper' function (which might look a bit familiar from previous labs)\n\n~~~js\nfunction getByValue(array, id) {\n          var result  = array.filter(function(obj){return obj.id == id;} );\n          return result ? result[0] : null; // or undefined\n        }\n~~~\n\n\nand here's the function stub (***findOne***) to be added to our **routes/donations.js** file\n\n```javascript\nrouter.findOne = (req, res) => {\n\n// Create a donation variable and use the helper function\n// to find\n// req.params.id\n// in our donations array\n\n// Then either return the found donation\n// or a suitable error message\n}\n```\nYou'll then need to add the route to your **app.js**\n\n```javascript\nHTTP REQUEST = GET\nROUTE PATH = '/donations/:id'\n```\nso go ahead and have a go at that (very similar to 'findAll').\n\nAlso, just for completeness, you should format the json response again.\n\n\n### Testing Our 'findOne' Route\n\nNow that we have another GET 'service' in our RESTful APi, we should really test it via our REST Client.\n\n### The Request\n\nGETing donation with id '1000001'\n~~~html\n/donations/1000001\n~~~\n\n\n### The Response\n\n![](img/lab02s23.png)\n\nRequesting donation with id '10000011'\n~~~html\n/donations/10000011\n~~~\n\n![](img/lab02s24.png)\n"
    },
  
    {
    "title": "",
    "shortTitle": "05",
    "contentMd" : "\n# Step 5 - Adding our 'Routes', Part 2 ('addDonation' & 'incrementUpvotes')\n\nBefore we go any further, recall our routes, described as follows:\n\n* GET **/donations** - return a list of donations and associated metadata\n* GET **/donations/:id** - return an individual donation with associated metadata\n* POST **/donations** - create a new donation\n* PUT **/donations/:id/upvote** - upvote a donation, notice we use the donation ID in the URL\n* DELETE **/donations/:id** - delete a donation by ID\n\nWe've already implemented the first two, so now let's have a go at\n\n* Adding a new donation and 'Upvoting' a donation - we'll leave deleting a donation until the last step\n\n## Creating Our 'Add' Route - 'addDonation'\nSimilar to the previous step, we start by creating a function (***addDonation***) for adding a single donation in our **routes/donations.js** file\n\n```javascript\nrouter.addDonation = (req, res) => {\n    //Add a new donation to our list\n    var id = Math.floor((Math.random() * 1000000) + 1); //Randomly generate an id\n    // parameters to store\n    // id (for id)\n    // req.body.paymenttype (for paymenttype)\n    // req.body.amount (for amount)\n    // 0 (for upvotes)\n    var currentSize = donations.length;\n\n    donations.push(/*add the relevant code here*/);\n\n    if((currentSize + 1) == donations.length)\n        res.json({ message: 'Donation Added!'});\n    else\n        res.json({ message: 'Donation NOT Added!'});\n}\n```\nNotice we only return a json message confirming (or Not) we've added the donation.\n\nNext, inside our **app.js** we need to define the actual route which will trigger the above function so keeping in mind the route is **/donations** with a **POST** request, see can you make the necessary additions?\n\n---\n### Testing Our 'Add' Route\n\nNow that we have a POST 'service' in our RESTful APi, let's test it via our REST Client.\n\nFirst, confirm what is currently in the list\n\n![](img/lab02s25.png)\n\n### The Request\n\nWe need to fill in the **Request Body** for our POST\n\n![](img/lab02s26.png)\n\nPOSTing donation data in JSON format\n\n~~~json\n{\"id\":0,\"paymenttype\":\"Direct\",\"amount\":500,\"upvotes\":0}\n~~~\n\n### The Response\n\n![](img/lab02s27.png)\n\nGET all donations again to confirm\n\n![](img/lab02s28.png)\n\n---\n## Creating Our 'Upvote' Route - 'incrementVotes'\n\nHere's what we need to implement the 'Upvote' route\n\n**routes/donations.js**\n\n```javascript\nrouter.incrementUpvotes = (req, res) => {\n    // Find the relevant donation based on params id passed in\n    // Add 1 to upvotes property of the selected donation based on its id\n    var donation = getByValue(donations,req.params.id);\n    donation.upvotes += 1;\n}\n```\n\nAnd again, in your **app.js** you need to add the correct 'route' to trigger the function, so, assuming we use **/vote**, have a go at writing the correct call.\n\n### Testing Our 'Upvote' Route\n\nFirst, retrieve a single donation (1000001 here) to confirm what is the current upvotes value\n\n![](img/lab02s29.png)\n\nNow that we have a PUT 'service' in our RESTful APi, let's test it via our REST Client.\n\n### The Request\n\nUPDATEing donation votes with id '1000001'\n\n~~~js\n/donations/100001/votes\n~~~\n\n![](img/lab02s30.png)\n\n\n### The Response (from another GET)\n\n![](img/lab02s31.png)\n\nas an exercise, have a go at returning the following on a successful 'upvote'\n\n![](img/lab02s32.png)\n"
    },
  
    {
    "title": "",
    "shortTitle": "06",
    "contentMd" : "\n# Step 5 - Adding our 'Routes', Part 3 ('deleteDonation')\n\n## Creating Our 'Delete' Route - 'deleteDonation'\nAgain, we start with the function in our **routes/donations.js** file\n\n```javascript\nrouter.deleteDonation = (req, res) => {\n    //Delete the selected donation based on its id\n\n    // First, find the relevant donation to delete\n    // Next, find it's position in the list of donations\n\n    // Then use donations.splice(index, 1) to remove it from the list\n\n    // Return a message to reflect success or failure of delete operation\n}\n```\nand update our **app.js** accordingly\n\n```javascript\napp.delete(ROUTE, FUNCTION);\n```\n\n### Testing Our 'Delete' Route\n\nNow that we have a DELETE 'service' in our RESTful APi, let's test it via our REST Client.\n\n### The Request\n\nDELETEing donation with id '1000001'\n\n~~~js\n/donations/1000001\n~~~\n\n![](img/lab02s33.png)\n\n![](img/lab02s34.png)\n\n### The Response\n\n\n![](img/lab02s35.png)\n\nA quick GET all to confirm the deletion\n\n![](img/lab02s36.png)\n\n---\n\nAs a final exercise, have a go at returning the total number of upvotes for all the donations.\n\nTo get you started you can use this function to essentially 'sum up' all the votes for all the donations in the list\n\n~~~js\nfunction getTotalVotes(array) {\n    let totalVotes = 0;\n    array.forEach(function(obj) { totalVotes += obj.upvotes; });\n    return totalVotes;\n}\n~~~\n\nand assume our route will be\n\n~~~js\n/donations/votes\n~~~\n\nwhich returns, for example\n\n~~~js\n{\n  totalvotes : 8\n}\n~~~\n\n# All Done!\n"
    },
  
    {
    "title": "# Solution - Lab 2",
    "shortTitle": "Solution",
    "contentMd" : "# Solution - Lab 2\n\nYou can find the solution to this lab **[here](archives/donationweb-2.0.zip)**\n"
    }
  
  ]
  }

