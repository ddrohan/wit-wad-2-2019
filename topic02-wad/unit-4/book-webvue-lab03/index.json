


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-Vue-03",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab involves adding more functionality to our Vue Web App - <strong>DonationVue-3.0</strong> with the ability to Update, Delete and Upvote Donations.</p>",
  "folder" : "book-webvue-lab03",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Lab Vue 03 - DonationVue-3.0 (Vue Client App)",
    "shortTitle": "Lab-Vue-03",
    "contentMd" : "# Lab Vue 03 - DonationVue-3.0 (Vue Client App)\n\nThis lab involves adding more functionality to our Vue Web App - **DonationVue-3.0** with the ability to Update, Delete and Upvote Donations.\n\nYou can have a look at this, the final version of the app in action on the YouTube Channel [here](https://youtu.be/TKM3mxiUCeA) or visit the live site here [donationweb-ssd.firebaseapp.com](https://donationweb-ssd.firebaseapp.com)\n"
    },
  
    {
    "title": "",
    "shortTitle": "01",
    "contentMd" : "\n# Objectives\n\nIn this Lab, you will be required to build the final version of our Vue Client Web App, called **DonationVue-3.0**.  We will build on the previous lab, so you can either use your own version of **DonationVue-2.0** or download the starter code **[here](archives/donationvue-2.0.zip)**. In this version we will be updating/adding more **components** to introduce more functionality into our Web App.  \n\nOn completion of this lab you'll be able to\n\n* make further http api calls on our Node Server using [axios](https://github.com/axios/axios)\n* edit and delete donations on the server\n* upvote a single donation on the server\n* be able to use **callbacks** & **promises**\n* be able to **reuse custom components** and **sweetAlerts** to inform the user\n"
    },
  
    {
    "title": "# Step 2 - Setup",
    "shortTitle": "02",
    "contentMd" : "# Step 2 - Setup\n\nFirst thing you should do is download the starter code (or the solution to the previous lab, or copy your own) **[here](archives/donationvue-2.0.zip)** and then extract it to your single parent folder for all your web app projects you created for the previous labs - don't forget to run\n\n~~~\nnpm install\n~~~\n\nto install all the necessary dependencies.\n\nIt's not vital, but you should probably rename the directory and project for your final version of DonationVue if you want to keep different versions of your app like we did in the previous lab.\n\nBefore beginning any refactoring it's probably worth running the App too, just to confirm it launches correctly.\n\nThe rest of the lab involves adding functionality to allow the user to\n\n* **Upvote** and\n* **Delete** & **Edit** a Donation\n"
    },
  
    {
    "title": "# Step 3 - 'Upvote & Delete a Donation'",
    "shortTitle": "03",
    "contentMd" : "# Step 3 - 'Upvote & Delete a Donation'\n\nAt this stage we can add and list all our donations, so this step will involve allowing the user to upvote and delete a single donation, as well as sorting the donations in the table.\n\nThe first feature we'll implement is our **'Upvote'**. We'll do this by\n\n1. Refactoring the view to give a nice 'thumbs Up' icon option to the user\n2. Adding another 'axios' call to our api to 'upvote' on the Server\n3. Refactoring the Donations component to respond to a 'Thumbs Up'\n4. Making the 'Upvotes' table column **sortable** to sort on the upvotes value\n\n\n## Upvoting a Donation\nInside 'donationservice.js' add the following (Note the parameter & quotes \\` )\n\n~~~js\nupvoteDonation (id) {\n   return Api().put(`/donations/${id}/vote`)\n }\n~~~\n\nIn your 'Donations' component (Donations.vue) add the following **slot** to the table (inside the template)\n\n~~~html\n<a slot=\"upvote\" slot-scope=\"props\" class=\"fa fa-thumbs-up fa-2x\" @click=\"upvote(props.row._id)\"></a>\n~~~\n\nso you table should now look like this\n\n~~~html\n<v-client-table :columns=\"columns\" :data=\"donations\" :options=\"options\">\n  <a slot=\"upvote\" slot-scope=\"props\" class=\"fa fa-thumbs-up fa-2x\" @click=\"upvote(props.row._id)\"></a>\n</v-client-table>\n~~~\n\nthis inside your 'data()' add\n\n~~~js\nprops: ['_id']\n~~~\n\nadd a new column\n\n~~~js\n'upvote'\n~~~\nand finally this inside your 'methods:'\n\n~~~js\n// Fetches Donations when the component is created.\nupvote: function (id) {\n      DonationService.upvoteDonation(id)\n        .then(response => {\n\n          console.log(response)\n        })\n        .catch(error => {\n          this.errors.push(error)\n          console.log(error)\n        })\n    }\n~~~\n\nYou should now have something like this\n\n![](img/labvue0301.png)\n\nand after 'upvoting' the first row here, this\n\n![](img/labvue0302.png)\n\nTest your app for functionality and see if you can work out how to 'automatically' update the table after the user 'upvotes'.\n\nNotice also that we automatically get to filter on our new column 'Upvote'. This was great with the other columns but is not very useful here - we'll revisit this again later....\n\nwe can also make this column **sortable** by simply adding the following to our 'options' inside our 'data()'\n\n~~~js\nsortable: ['upvotes']\n~~~\n\nand if you add this to your 'App.vue' styles\n\n~~~html\n.VueTables__sortable {\n  cursor: pointer;\n}\n~~~\n\nyou'll get a visual clue as to the column name being 'clickable' so confirm that works before moving on.\n\n## Deleting a Donation\n\nThis involves similar steps to upvoting insofar as we need to\n\n1. Refactoring the view to give a nice 'Delete' icon option to the user\n2. Adding another 'axios' call to our api to 'delete' on the Server\n3. Refactoring the Donations component to respond to a 'Delete' (and possibly confirm with the user of their choice?)\n\nso here's what you need to initially have a go at that\n\n1.\n~~~html\n <a slot=\"remove\" slot-scope=\"props\" class=\"fa fa-trash-o fa-2x\" @click=\"deleteDonation(props.row._id)\"></a>\n~~~\n\n2.\n~~~js\ndeleteDonation (id) {\n   return Api().delete(`/donations/${id}`)\n }\n~~~\n\n3.\n\nColumn heading\n\n~~~js\n'remove'\n~~~\n\nmethods:\n~~~js\ndeleteDonation: function (id) {\n       DonationService.deleteDonation(id)\n         .then(response => {\n           this.loadDonations()\n         })\n         .catch(error => {\n           this.errors.push(error)\n           console.log(error)\n         })\n }\n~~~\n\nYour Web App should now look like this\n\n![](img/labvue0303.png)\n\nso test to confirm your delete works.\n\nNow, we should probably have some kind of safeguard against the user accidentally deleting a donation by mistake and that's where our **sweetAlerts** come in.\n\nFirst, install the correct dependency at the terminal window (as at the time of writing WebStorm doesn't have it)\n\n~~~\nnpm install vue-sweetalert2 --save\n~~~\n\n'import' **VueSweetalert2** and 'use' as necessary and replace your existing 'deleteDonation' with this one\n\n~~~js\ndeleteDonation: function (id) {\n     this.$swal({\n       title: 'Are you totaly sure?',\n       text: 'You can\\'t Undo this action',\n       type: 'warning',\n       showCancelButton: true,\n       confirmButtonText: 'OK Delete it',\n       cancelButtonText: 'Cancel',\n       showCloseButton: true,\n       showLoaderOnConfirm: true\n     }).then((result) => {\n       console.log('SWAL Result : ' + result)\n       if (result.value === true) {\n         DonationService.deleteDonation(id)\n           .then(response => {\n             // JSON responses are automatically parsed.\n             this.message = response.data\n             console.log(this.message)\n             this.loadDonations()\n             // Vue.nextTick(() => this.$refs.vuetable.refresh())\n             this.$swal('Deleted', 'You successfully deleted this Donation ' + JSON.stringify(response.data, null, 5), 'success')\n           })\n           .catch(error => {\n             this.$swal('ERROR', 'Something went wrong trying to Delete ' + error, 'error')\n             this.errors.push(error)\n             console.log(error)\n           })\n       } else {\n         this.$swal('Cancelled', 'Your Donation still Counts!', 'info')\n       }\n     })\n   }\n~~~  \n\nand see what happens when you try to delete/cancel deleting a donation - pretty sweet eh? (pun intended!!)\n\nNote : You may have noticed we were previously using **VueSweetalert** in our Donate Component and now we're using **VueSweetalert2**. It's not recommended to mix different versions of dependencies so instead of importing in separate components, we can place common dependencies in our **main.js** so go ahead and refactor that now.\n"
    },
  
    {
    "title": "#Step 4 - 'Updating a Donation' - Part 1",
    "shortTitle": "04",
    "contentMd" : "#Step 4 - 'Updating a Donation' - Part 1\n\nThis step introduces one of the defining concepts of Vue - **Component Reusability**\n\nBoth our 'Donate' and 'Update' Views are virtually identical so are ideal candidates for a reusable component.\n\nWe'll implement this by\n\n1. Adding more 'axios' calls to our api to 'get' and 'update' on the Server\n2. Refactoring the 'Donations' component to give a nice 'Edit' icon option to the user\n3. Creating a new 'DonationForm' to act as our reusable component in 'Donate' and 'Update'\n4. Refactoring the 'Donate' component to use the 'DonationForm'\n5. Creating a new 'Update' component for editing a single Donations\n6. Refactoring the 'Donations' component to respond to an 'Edit'\n\nYes, quite a lot to do here!\n\nTo begin, inside 'donationservice.js' add the following (Note the parameter & quotes \\` )\n\n~~~js\nfetchDonation (id) {\n    return Api().get(`/donations/${id}`)\n  },\nputDonation (id, donation) {\n    console.log('REQUESTING ' + donation._id + ' ' +\n        JSON.stringify(donation, null, 5))\n      return Api().put(`/donations/${id}`, donation,\n        { headers: {'Content-type': 'application/json'} })\n    }\n~~~\n\nIn your 'Donations.vue' add this **slot** for editing\n\n~~~js\n<a slot=\"edit\" slot-scope=\"props\" class=\"fa fa-edit fa-2x\" @click=\"editDonation(props.row._id)\"></a>\n~~~\n\nand the extra column needed\n\n~~~\n'edit'\n~~~\n\nConfirm your app renders like below before moving on\n\n![](img/labvue0304.png)\n\nNext, **copy** your 'Donate' component and save as 'DonationForm' - this will act as our reusable component for Donating and Editing.\n\nThere's a few changes we need to make to 'DonationForm' to make it reusable so first, because we need a different title for the add/Update button, add the following to your 'exports'\n\n~~~js\nprops: ['donationBtnTitle']\n~~~\n\nand then reference it for the button title inside the Form. It's probably a good idea to change the name of this component from 'Donate' to say, 'FormData'.\n\nNext, we need to send or **emit** a message to the parent component AND pass the donation object, using this component, to tell it when the button has been clicked, so replace\n\n~~~js\nthis.submitDonation(this.donation)\n~~~\n\nwith\n\n~~~js\nthis.$emit('donation-is-created-updated', this.donation)\n~~~\n\nand then remove the 'submitDonation' function altogether.\n\nNow we can replace the complete Form in our 'Donate' component and pass in the relevant button title to the component, so for simplicity, replace your 'Donate' component with this one\n\n~~~js\n<template>\n  <div id=\"app1\" class=\"hero\">\n    <h3 class=\"vue-title\"><i class=\"fa fa-money\" style=\"padding: 3px\"></i>{{messagetitle}}</h3>\n    <div class=\"container mt-3 mt-sm-5\">\n      <div class=\"row justify-content-center\">\n        <div class=\"col-md-6\">\n          <donation-form :donation=\"donation\" donationBtnTitle=\"Make Donation\" @donation-is-created-updated=\"submitDonation\"></donation-form>\n        </div><!-- /col -->\n      </div><!-- /row -->\n    </div><!-- /container -->\n  </div>\n</template>\n\n<script>\nimport DonationService from '@/services/DonationService'\nimport DonationForm from '@/components/DonationForm'\n\nexport default {\n  data () {\n    return {\n      donation: {paymenttype: 'Direct', amount: 0.0, message: ''},\n      messagetitle: ' Make Donation '\n    }\n  },\n  components: {\n    'donation-form': DonationForm\n  },\n  methods: {\n    submitDonation: function (donation) {\n      DonationService.postDonation(donation)\n        .then(response => {\n          console.log(response)\n        })\n        .catch(error => {\n          this.errors.push(error)\n          console.log(error)\n        })\n    }\n  }\n}\n</script>\n\n<style scoped>\n  #app1 {\n    width: 95%;\n    margin: 0 auto;\n  }\n  .vue-title {\n    margin-top: 30px;\n    text-align: center;\n    font-size: 45pt;\n    margin-bottom: 10px;\n  }\n</style>\n~~~\n\nPay particular attention to the 'template' and 'export' sections, especially the\n\n~~~js\n:donation=\"donation\"\n~~~\n\nas you'll be doing this yourself for the edit feature.\n\nIf you run into rendering issues with your 'Donate' component use this 'DonationForm' instead\n\n~~~js\n<template>\n  <form @submit.prevent=\"submit\">\n    <div class=\"form-group\">\n      <label class=\"form-label\">Select Payment Type</label>\n      <select id=\"paymenttype\" name=\"paymenttype\" class=\"form-control\" type=\"text\" v-model=\"paymenttype\">\n        <option value=\"null\" selected disabled hidden>Choose Payment Type</option>\n        <option value=\"Direct\">Direct</option>\n        <option value=\"PayPal\">PayPal</option>\n        <option value=\"Visa\">Visa</option>\n      </select>\n    </div>\n    <div class=\"form-group\" :class=\"{ 'form-group--error': $v.amount.$error }\">\n      <label class=\"form-control-label\" name=\"amount\">Amount (Enter a number between 1 and 1000)</label>\n      <input class=\"form__input\" type=\"decimal\" v-model.trim=\"amount\"/>\n    </div>\n    <div class=\"error\" v-if=\"!$v.amount.between\">Amount must be between 1 and 1000</div>\n    <div class=\"form-group\" :class=\"{ 'form-group--error': $v.message.$error }\">\n      <label class=\"form__label\">Personal Message</label>\n      <input class=\"form__input\" placeholder=\"enter some message here\" v-model.trim=\"$v.message.$model\"/>\n    </div>\n    <div class=\"error\" v-if=\"!$v.message.required\">Message is Required</div>\n    <div class=\"error\" v-if=\"!$v.message.minLength\">Message must have at least {{$v.message.$params.minLength.min}} letters.</div>\n    <p>\n      <button class=\"btn btn-primary btn1\" type=\"submit\" :disabled=\"submitStatus === 'PENDING'\">{{ donationBtnTitle }}</button>\n    </p>\n    <p>\n      <a href=\"#/donations\" class=\"btn btn-primary btn1\" role=\"button\">Manage Donations</a>\n    </p>\n    <p class=\"typo__p\" v-if=\"submitStatus === 'OK'\">Thanks for your Donation!</p>\n    <p class=\"typo__p\" v-if=\"submitStatus === 'ERROR'\">Please Fill in the Form Correctly.</p>\n    <p class=\"typo__p\" v-if=\"submitStatus === 'PENDING'\">Donating...</p>\n  </form>\n</template>\n\n<script>\nimport Vue from 'vue'\nimport VueForm from 'vueform'\nimport Vuelidate from 'vuelidate'\nimport { required, minLength, between } from 'vuelidate/lib/validators'\n\nVue.use(VueForm, {\n  inputClasses: {\n    valid: 'form-control-success',\n    invalid: 'form-control-danger'\n  }\n})\n\nVue.use(Vuelidate)\n\nexport default {\n  name: 'FormData',\n  props: ['donationBtnTitle', 'donation'],\n  data () {\n    return {\n      messagetitle: ' Donate ',\n      message: this.donation.message,\n      paymenttype: this.donation.paymenttype,\n      amount: this.donation.amount,\n      upvotes: 0,\n      submitStatus: null\n    }\n  },\n  validations: {\n    message: {\n      required,\n      minLength: minLength(5)\n    },\n    amount: {\n      required,\n      between: between(1, 1000)\n    }\n  },\n  methods: {\n    submit () {\n      console.log('submit!')\n      this.$v.$touch()\n      if (this.$v.$invalid) {\n        this.submitStatus = 'ERROR'\n      } else {\n        // do your submit logic here\n        this.submitStatus = 'PENDING'\n        setTimeout(() => {\n          this.submitStatus = 'OK'\n          var donation = {\n            paymenttype: this.paymenttype,\n            amount: this.amount,\n            upvotes: this.upvotes,\n            message: this.message\n          }\n          this.donation = donation\n          console.log('Submitting in DonationForm : ' + JSON.stringify(this.donation, null, 5))\n          this.$emit('donation-is-created-updated', this.donation)\n        }, 500)\n      }\n    }\n  }\n}\n</script>\n\n<style scoped>\n  #app1 {\n    width: 95%;\n    margin: 0 auto;\n  }\n  .required-field > label::after {\n    content: '*';\n    color: red;\n    margin-left: 0.25rem;\n  }\n  .donate-form .form-control-label.text-left{\n    text-align: left;\n  }\n\n  label {\n    display: inline-block;\n    width: 540px;\n    text-align: left;\n    font-size: x-large;\n  }\n  .typo__p {\n    width: 540px;\n    font-size: x-large;\n  }\n  .btn1 {\n    width: 300px;\n    font-size: x-large;\n  }\n  p {\n    margin-top: 20px;\n  }\n\n  input {\n    border: 1px solid silver;\n    border-radius: 4px;\n    background: white;\n    padding: 5px 10px;\n    width: 540px;\n  }\n\n  .dirty {\n    border-color: #5A5;\n    background: #EFE;\n  }\n\n  .dirty:focus {\n    outline-color: #8E8;\n  }\n\n  .error {\n    border-color: red;\n    background: #157ffb;\n    color: whitesmoke;\n  }\n\n  .error:focus {\n    outline-color: #ffa519;\n  }\n</style>\n~~~\n"
    },
  
    {
    "title": "#Step 4 - 'Updating a Donation' - Part 2",
    "shortTitle": "05",
    "contentMd" : "#Step 4 - 'Updating a Donation' - Part 2\n\nNow that we've refactored our 'Donate' and have a reusable Form, this step involves using our reusable 'DonationForm' to implement the edit feature.\n\nBefore we start though we'll complete our 'Donations' component and pass the id of the donation to edit, to the component that will use it when the user clicks the edit icon, so add this to your 'methods'\n\n\n~~~js\neditDonation: function (id) {\n      this.$router.params = id\n      this.$router.push('edit')\n    }\n~~~\n\nNow, **copy** your 'Donate' component and save as 'Edit' - this will act as our starting point for Editing.\n\nFirst, add a new 'route' for our 'Edit' component\n\n~~~js\n{\n  path: '/edit',\n  name: 'Edit',\n  component: Edit,\n  props: true\n}\n~~~\n\nNOTE the 'props' property.\n\nNext, change the relevant button titles and messages to\n\n~~~\n'Update Donation'\n~~~\n\nand the method to trigger to\n\n~~~\nupdateDonation\n~~~\n\nAdd a boolean\n\n~~~js\nchildDataLoaded: false\n~~~\n\nto your 'data()' to manage the callback delay before loading and then add the following function\n\n~~~js\ngetDonation: function () {\n      DonationService.fetchDonation(this.$router.params)\n        .then(response => {\n          this.temp = response.data\n          this.donation = this.temp[0]\n          this.childDataLoaded = true\n        })\n        .catch(error => {\n          this.errors.push(error)\n          console.log(error)\n        })\n    }\n~~~\n\nthis needs to be called at creation time, so ensure that is the case and then add this function\n\n~~~js\nupdateDonation: function (donation) {\n      DonationService.putDonation(this.$router.params, donation)\n        .then(response => {\n          console.log(response)\n        })\n        .catch(error => {\n          this.errors.push(error)\n          console.log(error)\n        })\n    }\n~~~\n\nso have a go at completing the edit feature when you need to\n\n1. Find the particular donation selected for editing when the component loads up or is 'created'\n2. Update that donation with the new values chosen by the user.\n\nTo get you started remember you should only load the 'donation-form' component **AFTER** the data has been retrieved from the server so using a **v-if** directive and referring to the notes could be useful here.\n\nThe final step in this lab is to 'tidy up' the Donations list regarding what we want to filter on, and give the UI a small makeover :)\n"
    },
  
    {
    "title": "# Step 5 - 'A New Look'",
    "shortTitle": "06",
    "contentMd" : "# Step 5 - 'A New Look'\n\nAs a final step, we'll give our Vue Web App a bit of a 'face lift' :) and sort out the issue with filtering on all table columns.\n\nFirst, open up your 'App.vue' and replace the following in the 'app/styles' section\n\n~~~js\n#app {\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  padding-top: 20px;\n  background: url(\"./assets/homerbgyellow.png\") repeat center top;\n}\n.VueTables__sortable {\n  cursor: pointer;\n}\n~~~\n\nNext, open up your 'Donations.vue' and add the following to the 'options:'\n\n~~~js\nperPage: 10,\nfilterable: ['paymenttype', 'amount', 'upvotes']\n~~~\n\nThis will ensure the user can only 'filter' on the listed columns. Also we can set the number of rows per page here, the default is 10 anyway, but now we can change it to whatever we like.\n\nAs an exercise, create a new **VFooter** component that displays a simple message to the user which can be used as a 'footer' message on all the different pages\n\nNow you should be seeing something like this\n\n![](img/labvuemain.png)\n\nThere's a nice feature using expandable child rows in our table not implemented here in the labs but is featured in the live version - that's something you can investigate yourself :)\n"
    },
  
    {
    "title": "# Solution - Lab Vue 03",
    "shortTitle": "Solution",
    "contentMd" : "# Solution - Lab Vue 03\n\nYou can find the solution to this lab **[here](archives/donationvue-3.0.zip)**.\n"
    }
  
  ]
  }

