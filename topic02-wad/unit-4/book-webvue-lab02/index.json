


  {
  
  
    "properties" : {},
  
  "type" : "lab",
  "title" : "Lab-Vue-02",
  "img" : "img/main.png",
  "videoid" : "none",
  "objectives" : "<p>This lab involves adding some actual functionality to our Vue Web App - <strong>DonationVue-2.0</strong> with the ability to List and add Donations.</p>",
  "folder" : "book-webvue-lab02",
  "link" : "index.html",
  "los": [
   ]
,
  "chapters" : [
  
    {
    "title": "# Lab Vue 02 - DonationVue-2.0 (Vue Client App)",
    "shortTitle": "Lab-Vue-02",
    "contentMd" : "# Lab Vue 02 - DonationVue-2.0 (Vue Client App)\n\nThis lab involves adding some actual functionality to our Vue Web App - **DonationVue-2.0** with the ability to List and add Donations.\n\nIn this lab we'll add the ability to make a Donation and list all the Donations via our Restful API (our Node Server).\n\nYou can have a look at this version of the app in action on the YouTube Channel [here](https://youtu.be/SIUhcOy__OQ)\n"
    },
  
    {
    "title": "",
    "shortTitle": "01",
    "contentMd" : "\n# Objectives\n\nIn this Lab, you will be required to build the next version of our Vue Client Web App, called **DonationVue-2.0**.  We will build on the previous lab, so you can either use your own version of **DonationVue-1.0** or download the starter code **[here](archives/donationvue-1.0.zip)**. In this version we will be updating some of our **components** to introduce functionality into our Web App.  \n\nOn completion of this lab you'll be able to\n\n* make http api calls on our Node Server using [axios](https://github.com/axios/axios)\n* list all donations on the server\n* add a single donation to the server\n* be able to use **callbacks** & **promises**\n* be able to use **VueTables** and **validate** & **filter** data\n"
    },
  
    {
    "title": "# Step 2 - Setup",
    "shortTitle": "02",
    "contentMd" : "# Step 2 - Setup\n\nFirst thing you should do is download the starter code (or the solution to the previous lab) **[here](archives/donationvue-1.0.zip)** and then extract it to your single parent folder for all your web app projects you created for the previous labs - don't forget to run\n\n~~~\nnpm install\n~~~\n\nto install all the necessary dependencies.\n\nIt's not vital, but you should probably rename the directory and project for your final version of DonationVue if you want to keep different versions of your app.\n\n![](img/labvue0201.png)\n\n![](img/labvue0202.png)\n\nBefore beginning any refactoring it's probably worth running the App, just to confirm it launches correctly.\n\nThe rest of the lab involves adding functionality to allow the user to\n\n* **Donate**\n* **View All Donations** and\n* **Filter/Search the Donations list**\n"
    },
  
    {
    "title": "# Step 3 - 'View All Donations'",
    "shortTitle": "03",
    "contentMd" : "# Step 3 - 'View All Donations'\n\nWith any application that will be listing some data it's always a good idea to get the 'Display/list/View All' option implemented first, if for no other reason, to confirm that what you have in the 'app' can be viewed in the 'app' and that you can confirm your 'add' works pretty much instantly.\n\nSo the first feature we'll implement is our **'View All Donations'** and list our 'donations' we have stored on the Server (in the mongodb database). We'll do this in 2 stages\n\n1. Retrieve the data (in JSON format) from the server and just display them as is, confirming our 'GET' request is working\n2. Display this data in a **VueTable** with eventually, Edit/Delete/Upvote & Filter/Search options\n\nFirst of all we need to install a few dependencies to make this process a little easier, namely\n\n- axios (for our http requests) and\n- vue-tables-2 (for displaying our donations in a very nice table)\n\nso go ahead and install those via WebStorm (or the CL if you prefer).\n\nNow, to try and improve our overall design we're going to wrap our axios calls in a separate javascript file so create a new folder called 'services' in the 'src' directory. Then create 2 javascript files 'api.js' and 'donationservice.js' like so\n\n![](img/labvue0203.png)\n\nInside 'api.js' place the following\n\n~~~js\nimport axios from 'axios'\n\nexport default() => {\n  return axios.create({\n    baseURL: 'http://localhost:3000/'\n  })\n}\n~~~\n\nand inside 'donationservice.js' place\n\n~~~js\nimport Api from '@/services/api'\n\nexport default {\n  fetchDonations () {\n    return Api().get('/donations')\n  }\n}\n~~~\n\n## NOTE : YOU NEED TO HAVE YOUR DONATION NODE SERVER RUNNING ON HTTP://LOCALHOST:3000 <I><U>BEFORE</U></I> YOU TEST YOUR CLIENT\n\n## ***'Requesting'*** our List of Donations\n\nIn your 'Donations' component (Donations.vue) add the following to the script tag section\n\nthis import immediately after the script tag\n~~~js\nimport DonationService from '@/services/DonationService'\n~~~\n\nthis inside your 'data()' function\n\n~~~js\ndonations: [],\nerrors: []\n~~~\n\nand finally this after your 'data()' function\n\n~~~js\n// Fetches Donations when the component is created.\n  created () {\n    this.loadDonations()\n  },\n  methods: {\n    loadDonations: function () {\n      DonationService.fetchDonations()\n        .then(response => {\n          // JSON responses are automatically parsed.\n          this.donations = response.data\n          console.log(this.donations)\n        })\n        .catch(error => {\n          this.errors.push(error)\n          console.log(error)\n        })\n    }\n  }\n~~~\n\nso, for reference, your updated script content looks like this\n\n~~~js\nimport DonationService from '@/services/DonationService'\nexport default {\n  name: 'Donations',\n  data () {\n    return {\n      messagetitle: ' Donations List ',\n      donations: [],\n      errors: []\n    }\n  },\n  // Fetches Donations when the component is created.\n  created () {\n    this.loadDonations()\n  },\n  methods: {\n    loadDonations: function () {\n      DonationService.fetchDonations()\n        .then(response => {\n          // JSON responses are automatically parsed.\n          this.donations = response.data\n          console.log(this.donations)\n        })\n        .catch(error => {\n          this.errors.push(error)\n          console.log(error)\n        })\n    }\n  }\n}\n~~~\n\nBe sure you understand what's going on here as you'll be adding to these files later on.\n\nWe want to initially display the records (just so we know it works) on our page in basic JSON format so have a go at something along the lines of the following\n\n![](img/labvue0204.png)\n\n |`NOTE ON POSSIBLE *CORS* ERROR` |\n|--- | --- |\n| If you get a `CORS` error then you'll need to `1. revisit your Node Server` `2.` install and *require* the `cors` module and then `3. app.use(cors())` in your `app.js` |\n\n**ALSO - If you have been 'stringifying' your JSON on your server i.e. calling JSON.stringfy(), this returns a string NOT a JSON ARRAY (which your Vue Client Expects) so you'll need to remove this and just send back the raw data in your result to avoid a wrong type expected error when trying to display your data in your Vue table**\n\n## Displaying our 'List of Donations'\n\nOnce we have requested our JSON donation data the next step is to display them properly in a table, specifically a **v-client-table** so first we need to add another dependency **vue-tables-2** (**NOT** vue-tables) - do that now.\n\nIn your 'Donations.vue', add the following\n\n~~~js\nimport Vue from 'vue'\nimport VueTables from 'vue-tables-2'\n\nVue.use(VueTables.ClientTable, {compileTemplates: true, filterByColumn: true})\n~~~\n\nto give us access to the **VueTables** reusable component.\n\nNext, we need to specify some properties and 'options' of our table inside our 'data()' function, so add the following\n\n~~~js\ncolumns: ['_id', 'paymenttype', 'amount', 'upvotes'],\noptions: {\n        headings: {\n          _id: 'ID',\n          paymenttype: 'Payment Type',\n          amount: 'Amount',\n          upvotes: 'Upvotes'\n        }\n      }\n~~~\n\nfor reference\n\n~~~js\ndata () {\n   return {\n     messagetitle: ' Donations List ',\n     donations: [],\n     errors: [],\n     columns: ['_id', 'paymenttype', 'amount', 'upvotes'],\n     options: {\n       headings: {\n         _id: 'ID',\n         paymenttype: 'Payment Type',\n         amount: 'Amount',\n         upvotes: 'Upvotes'\n       }\n     }\n   }\n }\n~~~\n\nAdd the following style attribute\n\n~~~\n#app1 {\n  width: 60%;\n  margin: 0 auto;\n}\n~~~\n\nand finally, our table, inside the template (so replace the basic JSON)\n\n~~~html\n<div id=\"app1\">\n   <v-client-table :columns=\"columns\" :data=\"donations\" :options=\"options\">\n   </v-client-table>\n </div>\n~~~\n\n**Note the properties of our table and how they correspond to the data() properties**\n\nIf all goes to plan, when you reload your app you should get\n\n![](img/labvue0205.png)\n\nPretty Cool if I do say so myself !!\n\n**You can even filter on each individual column - by default !!**\n\nWe'll revisit this table again to add in extra features and customisation, but for the moment, let's move on to adding a donation - the next step.\n"
    },
  
    {
    "title": "#Step 4 - 'Donate'",
    "shortTitle": "04",
    "contentMd" : "#Step 4 - 'Donate'\n\nSo now that we can display a list of the donations currently on the server, the second feature we'll implement is our **'Donate'** option where the user can choose an *amount*, a *payment type* and optionally, a *message*. Before we start, we need to install a few more dependencies, namely,\n\n- vueform (for our Donate form)\n- vuelidate (for validation)\n- vue-sweetalert (for some rich UI alerts)\n\nso do that now.\n\nNext, edit your **Donate** component and 'use' the following (you may need to import the relevant dependencies)\n\n~~~js\nVue.use(VueForm, {\n  inputClasses: {\n    valid: 'form-control-success',\n    invalid: 'form-control-danger'\n  }\n})\n\nVue.use(Vuelidate)\nVue.use(VueSweetalert)\n~~~\n\nThere's a bit more work involved to get this feature implemented, so the first thing we'll do is write the function to allow us to *add* a donation to our list (stored on the server).\n\n## ***'Posting'*** a single Donation\n\nOpen up your **donationservice.js** and add the following\n\n~~~js\npostDonation (donation) {\n  return Api().post('/donations', donation,\n    { headers: {'Content-type': 'application/json'} })\n}\n~~~\n\nThen in your **Donate** component add the following to the 'data()' function\n\n~~~js\nmessage: '',\npaymenttype: 'Direct',\namount: 0,\nupvotes: 0,\ndonation: {}\n~~~\n\nand this function, to the `methods:` section of your Component\n\n~~~js\nsubmitDonation: function (donation) {\n      DonationService.postDonation(donation)\n        .then(response => {\n          // JSON responses are automatically parsed.\n          console.log(response)\n        })\n        .catch(error => {\n          this.errors.push(error)\n          console.log(error)\n        })\n    }\n~~~\n\nand fix any import errors.\n\nNow we need to add the relevant scripting for validating our form data, so begin by adding the following import\n\n~~~js\nimport { required, minLength, between } from 'vuelidate/lib/validators'\n~~~\n\nadd the following to your 'data()'\n\n~~~js\nsubmitStatus: null\n~~~\n\nadd the following `validations:` to your export\n\n~~~js\nvalidations: {\n    message: {\n      required,\n      minLength: minLength(5)\n    },\n    amount: {\n      required,\n      between: between(1, 1000)\n    }\n  },\n~~~\n\nand add the following to your `methods:` section inside your `Donate` Component\n\n~~~js\nsubmit () {\n   console.log('submit!')\n   this.$v.$touch()\n   if (this.$v.$invalid) {\n     this.submitStatus = 'ERROR'\n   } else {\n     // do your submit logic here\n     this.submitStatus = 'PENDING'\n     setTimeout(() => {\n       this.submitStatus = 'OK'\n       var donation = {\n         paymenttype: this.paymenttype,\n         amount: this.amount,\n         upvotes: this.upvotes,\n         message: this.message\n       }\n       this.donation = donation\n       this.submitDonation(this.donation)\n     }, 500)\n   }\n }\n~~~\n\nFinally, we need to add the actual form to accept the data from the user. So inside your 'template' add the following\n\n~~~html\n<form @submit.prevent=\"submit\">\n   <div class=\"form-group\">\n     <label class=\"form-label\">Select Payment Type</label>\n     <select id=\"paymenttype\" name=\"paymenttype\" class=\"form-control\" type=\"text\" v-model=\"paymenttype\">\n       <option value=\"null\" selected disabled hidden>Choose Payment Type</option>\n       <option value=\"Direct\">Direct</option>\n       <option value=\"PayPal\">PayPal</option>\n       <option value=\"Visa\">Visa</option>\n     </select>\n   </div>\n   <div class=\"form-group\" :class=\"{ 'form-group--error': $v.amount.$error }\">\n     <label class=\"form-control-label\" name=\"amount\">Amount (Enter a number between 1 and 1000)</label>\n     <input class=\"form__input\" type=\"number\" v-model.trim=\"amount\"/>\n   </div>\n   <div class=\"error\" v-if=\"!$v.amount.between\">Amount must be between 1 and 1000</div>\n   <div class=\"form-group\" :class=\"{ 'form-group--error': $v.message.$error }\">\n     <label class=\"form__label\">Personal Message</label>\n     <input class=\"form__input\" v-model.trim=\"$v.message.$model\"/>\n   </div>\n   <div class=\"error\" v-if=\"!$v.message.required\">Message is Required</div>\n   <div class=\"error\" v-if=\"!$v.message.minLength\">Message must have at least {{$v.message.$params.minLength.min}} letters.</div>\n   <p>\n     <button class=\"btn btn-primary btn1\" type=\"submit\" :disabled=\"submitStatus === 'PENDING'\">Make Donation</button>\n   </p>\n   <p class=\"typo__p\" v-if=\"submitStatus === 'OK'\">Thanks for your Donation!</p>\n   <p class=\"typo__p\" v-if=\"submitStatus === 'ERROR'\">Please Fill in the Form Correctly.</p>\n   <p class=\"typo__p\" v-if=\"submitStatus === 'PENDING'\">Donating...</p>\n </form>\n~~~\n\nand add this to your styles\n\n~~~js\n  #app1 {\n    width: 95%;\n    margin: 0 auto;\n  }\n.required-field > label::after {\n    content: '*';\n    color: red;\n    margin-left: 0.25rem;\n  }\n  .donate-form .form-control-label.text-left{\n    text-align: left;\n  }\n\n  label {\n    display: inline-block;\n    width: 540px;\n    text-align: left;\n    font-size: x-large;\n  }\n  .typo__p {\n    width: 540px;\n    font-size: x-large;\n  }\n  .btn1 {\n    width: 300px;\n    font-size: x-large;\n  }\n  p {\n    margin-top: 20px;\n  }\n\n  input {\n    border: 1px solid silver;\n    border-radius: 4px;\n    background: white;\n    padding: 5px 10px;\n    width: 540px;\n  }\n\n  .dirty {\n    border-color: #5A5;\n    background: #EFE;\n  }\n\n  .dirty:focus {\n    outline-color: #8E8;\n  }\n\n  .error {\n    border-color: red;\n    background: #157ffb;\n    color: whitesmoke;\n  }\n\n  .error:focus {\n    outline-color: #ffa519;\n  }\n~~~\n\nWe'll go through exactly what's going on here during the lab (if we haven't covered it in the lectures already)\n\nAnd we'll eventually revisit this component, and refactor it to be reusable for our Edit feature.\n\nBut if all goes as planned, your 'Donate' screen will look like this\n\n![](img/labvue0206.png)\n\nand you should be able to make donations to your server.\n"
    },
  
    {
    "title": "# Solution - Lab Vue 02",
    "shortTitle": "Solution",
    "contentMd" : "# Solution - Lab Vue 02\n\nYou can find the solution to this lab **[here](archives/donationvue-2.0.zip)**.\n"
    }
  
  ]
  }

